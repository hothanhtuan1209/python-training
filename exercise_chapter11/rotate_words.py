"""
This module contains a code for exercises 11-5 related to:
Think Python, 2nd Edition
Chapter 11: Dictionaries

This program is used to rotate each word in the word.txt file
by increasing number of hops, with each rotation, if the rotated 
word appears in the file, then print the original word, the number
of hops and the rotated word.
"""

def make_word_dict():
    """
    Read the words in words.txt and return a dictionary
    that contains the words as keys
    
    return: dict
    """
    
    word_dict = {}
    fin = open('words.txt')
    
    for line in fin:
        word = line.strip()
        word_dict[word] = None

    return word_dict

word_dict = make_word_dict()

def caesar_cipher(word, shift):
    """
    Apply Caesar cipher to a word by shifting the characters by n positions.
    
    word: string
    shift: integer
    
    return: string
    """
    
    result = ""
    
    for letter in word:
        if letter.isalpha():
            if letter.isupper():
                result += chr((ord(letter) - 65 + shift) % 26 + 65)
            else:
                result += chr((ord(letter) - 97 + shift) % 26 + 97)
        else:
            result += letter
    
    return result

def rotate_pairs(word, word_dict):
    """
    Prints all words that can be generated by rotating word.

    word: string
    word_dict: dictionary with words as keys
    """
    
    for i in range(1, 20):
        rotated = caesar_cipher(word, i)
        
        if rotated in word_dict:
            print(word, i, rotated)

for word in word_dict:
    rotate_pairs(word, word_dict)
